global Map =
{
	MapName = "te_delivery_b1",
	DispenseAmmoTime = 1,
	DontDispenseAmmo = true,
	Debug = true,

	// Dynomitable  East + West Walls
	Plant_East_Wall = "PLANT_East_Wall",
	Plant_West_Wall = "PLANT_West_Wall",

	// Keep track of some variables for reference
	cap1status = true, // available
	cap2status = true, // available
	FlagStatusus = 0, //0 nobody, 1 axis, 2 allies
	WestStat = 0,
	EastStat = 0,
	DoorStat = 0,
	GoldStatus = false,
	FriendlyFire,
	ElevatorStatus = "Bottom",

	Switches =
	{
		golddoor =
		{
			Enabled = false,
			Priority = 1.2,
			WaypointName = "goldswitch",
			LimitBots = 2,
			LimitTeam = (1<<TEAM.ALLIES),
		},

		// martin: re-enable this later
		elevator =
		{
			Enabled = false,
			Priority = 0, //cs: always set to 0 when using path through
			WaypointName = "elevator",
			AimPosition = Vector3(1591.875,2666.291,-141.341),

			// cs: example for GotoAsync usage
			//UseAsync = true,
			//AsyncTimeout = 3000,

			//cs: the bots will wait until elevator is at top
			Wait = function()
			{
				if ( Map.ElevatorStatus == "Top" )
				{
					sleep(1);
					return true;
				}
				return false;
			},
		},
	},

	ElevatorTop = function(trigger)
	{
		Map.ElevatorStatus = "Top";
	},

	ElevatorBottom = function(trigger)
	{
		Map.ElevatorStatus = "Bottom";
	},

	ElevatorDoor = function(trigger)
	{
		vel = ToVector(trigger.Action);

		//cs: only need to check this at bottom
		if ( Map.ElevatorStatus == "Bottom" )
		{
			if ( vel.y > 0 )
			{
				Map.ElevatorStatus == "Moving";
				Map.Switches.elevator.Enabled = false;
			}
			else
			{
				//Util.MapDebugPrint("opening");
				Map.Switches.elevator.Enabled = true;
			}
		}
	},

	Westwall = function(trigger)
	{
		Map.WestStat = 1;

		Util.EnableGoal("ROUTE_westwall");

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_West_Wall" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "Plant_West_Wall" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT.*" );

		if (Map.EastStat == 1)
		{
			Util.SetMaxUsers( 64, "CHECKPOINT.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, {
				"ARTILLERY_S_bFlag.*",
				"CALLARTILLERY_bFlag.*",
				"ATTACK_Alliedfirstdynodefense.*",
			});
		}

        Util.MapDebugPrint( "Westwall" );
	},

	Eastwall = function(trigger)
	{
		Map.EastStat = 1;

		Util.EnableGoal("ROUTE_eastwall");

		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_East_Wall" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_East_Wall" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT.*" );

		if (Map.WestStat == 1)
		{
			Util.SetMaxUsers( 64, "CHECKPOINT.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, {
				"ARTILLERY_S_bFlag.*",
				"CALLARTILLERY_bFlag.*",
				"ATTACK_Alliedfirstdynodefense.*",
			});
		}

        Util.MapDebugPrint( "Eastwall" );
	},

	East_Wall_Planted = function( trigger )
	{
		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_East_Wall" );

		Util.MapDebugPrint( "^1East_Wall_Planted" );
	},

	East_Wall_Defused = function( trigger )
	{
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_East_Wall" );

		Util.MapDebugPrint( "East_Wall_Defused" );
	},

	West_Wall_Planted = function( trigger )
	{
		SetAvailableMapGoals( TEAM.ALLIES, false, "Plant_West_Wall" );

		Util.MapDebugPrint( "^1West_Wall_Planted" );
	},

	West_Wall_Defused = function( trigger )
	{
		SetAvailableMapGoals( TEAM.ALLIES, true, "Plant_West_Wall" );

		Util.MapDebugPrint( "West_Wall_Defused" );
	},

	Control_Room_Door_Planted = function( trigger )
	{
		Util.MapDebugPrint( "Control_Room_Door_Planted" );
	},

	Control_Room_Door_Destroyed = function( trigger )
	{
		Map.Switches.golddoor.Enabled = true;

		SetAvailableMapGoals( TEAM.AXIS, false, {
			"DEFEND_rFlag.*",
			"AIRSTRIKE_rFlag.*",
		});

		Util.MapDebugPrint( "Control_Room_Door_Destroyed" );
	},

	// Allies take spawn flag
	delivery_flag_Allies_Captured = function(trigger)
	{
		Map.FlagStatus = 2;
		Map.Switches.golddoor.Enabled = true;

		SetAvailableMapGoals( TEAM.ALLIES, true, {
			"ATTACK_alliesdoorcontrolattack_.*",
			"DEFEND_AlliesButtondefense.*",
			"PLANT_Control_Room_Door",
		});

		SetAvailableMapGoals( TEAM.AXIS, false, {
			"ARTILLERY_S_Axis_first.*",
			"ATTACK_AxisFlagdefense_.*",
			"CALLARTILLERY_Axis_first_2",
			"ATTACK_AxisFlagdefense.*",
			"CHECKPOINT.*",
			"DEFUSE.*",
		});

		// Gold is not taken
		if (!Map.GoldStatus)
		{
			Util.LimitToClass( "CHECKPOINT.*", TEAM.AXIS, CLASS.SOLDIER );
			SetAvailableMapGoals( TEAM.AXIS, true, {
				"DEFEND_rSwitch.*",
				"CHECKPOINT.*",
			});
			Util.SetMaxUsersInProgress( 1, "CHECKPOINT.*" );
		}

		Util.MapDebugPrint( "delivery_flag_Allies_Captured" );
	},

	delivery_flag_Axis_Captured = function(trigger)
	{
		Map.FlagStatus = 1;
		SetAvailableMapGoals( TEAM.ALLIES, false, {
			"ATTACK_alliesdoorcontrolattack_.*",
			"DEFEND_AlliesButtondefense.*",
		});
		SetAvailableMapGoals( TEAM.AXIS, false, {
			"DEFEND_rSwitch.*",
			"CHECKPOINT.*",
		});
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_AxisFlagdefense_.*" );
		SetGoalPriority( "DEFEND_rSwitch.*", 0.5, TEAM.AXIS );
		SetGoalPriority( "ATTACK_AxisFlagdefense_.*", 0.2, TEAM.AXIS );

		Util.MapDebugPrint( "delivery_flag_Axis_Captured" );
	},

	loading_doors_open = function( trigger )
	{
		Map.DoorStat = 1;
		SetAvailableMapGoals( TEAM.AXIS, false, {
			"DEFEND_rSwitch.*",
			"DEFEND_rFlag.*",
			"AIRSTRIKE_rFlag.*",
		});
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_Axisgoldcapdef_.*" );
		if (Map.GoldStatus)
		{
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rTransmit.*" );
		}
		if ( Map.FriendlyFire < 1 ) {
			SetAvailableMapGoals( TEAM.AXIS, true, {
				"ARTILLERY_S_rTransmit.*",
				"CALLARTILLERY_rTransmit.*",
			});
		}

		SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_alliesdoorcontrolattack_.*" );
		//SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_AlliesButtondefense.*" ); // leave these on
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Axisgoldcapdef_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "CAPPOINT_Fake_.*" );


		Map.CheckCappoints();

		Map.Switches.golddoor.LimitTeam = (1<<TEAM.AXIS);

		Util.MapDebugPrint( "loading_doors_open" );
	},

	//  The Loading doors : closed
	loading_doors_close = function( trigger )
	{
		Map.DoorStat = 0;
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rSwitch.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, {
			"ATTACK_Axisgoldcapdef_.*",
			"ARTILLERY_S_rTransmit.*",
			"CALLARTILLERY_rTransmit.*",
		});

		SetAvailableMapGoals( TEAM.ALLIES, true, {
			"ATTACK_alliesdoorcontrolattack_.*",
			"DEFEND_AlliesButtondefense.*",
		});
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Axisgoldcapdef_.*" );

		//sleep(1.5); // wait a moment while doors are closing
		Map.Switches.golddoor.LimitTeam = (1<<TEAM.ALLIES);
		SetAvailableMapGoals( TEAM.ALLIES, false, {
			"CAPPOINT_Goldcap_2",
			"CAPPOINT_Goldcap_1",
		});
		SetAvailableMapGoals( TEAM.ALLIES, true, "CAPPOINT_Fake_.*" );

		Util.MapDebugPrint( "loading_doors_close" );
	},

	GoldTaken = function(trigger)
	{
		Map.GoldStatus = true;
		//SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, {
			"ATTACK.*",
			"CHECKPOINT.*",
			"AIRSTRIKE_rFlag.*",
		});

		SetAvailableMapGoals( TEAM.ALLIES, true, "CAPPOINT_Fake_.*" );


		if ( Map.DoorStat == 1) // if door is open ...
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, "CAPPOINT_Fake_.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rSwitch.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rTransmit.*" );

			SetAvailableMapGoals( TEAM.ALLIES, true, {
				"CALLARTILLERY_bTransmit.*",
				"ARTILLERY_S_bTransmit.*",
				"ATTACK_bTransmit.*",
			});
			if ( Map.FriendlyFire < 1 ) {
				SetAvailableMapGoals( TEAM.AXIS, true, {
					"ARTILLERY_S_rTransmit.*",
					"CALLARTILLERY_rTransmit.*",
				});
			}
		}


		Util.MapDebugPrint( "GoldTaken" );
	},

	GoldSecured = function(trigger)
	{
		Map.GoldStatus = false;
		SetAvailableMapGoals( TEAM.AXIS, false, {
			"DEFEND_delivery_flag_Axis_Captureddef_.*",
			"ARTILLERY_S_rTransmit.*",
			"CALLARTILLERY_rTransmit.*",
		});

		SetAvailableMapGoals( TEAM.ALLIES, false, {
			"CALLARTILLERY_bTransmit.*",
			"ARTILLERY_S_bTransmit.*",
		});

		Util.MapDebugPrint( "GoldSecured" );
	},

	CheckCappoints = function()
	{
		// set availability to the current status.
		SetAvailableMapGoals( TEAM.ALLIES, Map.cap1status, "CAPPOINT_GoldCap_1" );
		SetAvailableMapGoals( TEAM.ALLIES, Map.cap2status, "CAPPOINT_GoldCap_2" );
	},

	GoldCap1_Captured = function(trigger)
	{
		Util.DisableGoal( "CAPPOINT_Goldcap_1" );
		Map.cap1status = false;
		SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG_axis_gold2" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "FLAG_axis_gold1" );
		Util.MapDebugPrint( "GoldCap1_Captured" );
	},

	GoldCap2_Captured = function(trigger)
	{
		Util.DisableGoal( "CAPPOINT_Goldcap_2" );
		Map.cap2status = false;
		SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG_axis_gold2" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "FLAG_axis_gold1" );
		Util.MapDebugPrint( "GoldCap2_Captured" );
	},
	DisableCombatMove =
	{
		Name = "DisableCombatMove",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableCombatMovement = true;
			}
		},
		OnExit = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableCombatMovement = false;
			}
		},
	},
};

global OnMapLoad = function()
{
	SpawnBoxes = OnTriggerRegion(AABB(-488.000,71.000,9.000,96.000,530.000,123.000),Map.DisableCombatMove);

	// OnTrigger_section
	OnTrigger( "Axis reclaims the Forward Bunker!", Map.delivery_flag_Axis_Captured );
	OnTrigger( "Allies capture the Forward Bunker!", Map.delivery_flag_Allies_Captured );
	OnTrigger( "the West Wall Destroyed.", Map.Westwall );
	OnTrigger( "the East Wall Destroyed.", Map.Eastwall );
	OnTrigger( "Allies have stolen the Axis Gold!", Map.GoldTaken );
	OnTrigger( "Flag returned axis_gold1!", Map.GoldSecured );
	OnTrigger( "The Loading Door is Opening!", Map.loading_doors_open );
	OnTrigger( "The Loading Door is Closing!", Map.loading_doors_close );
	OnTrigger( "Planted at the Control Room Door.", Map.Control_Room_Door_Planted );

	// cs: elevator status
	OnTrigger( "top_l_door_Moving", Map.ElevatorTop );
	OnTrigger( "bottom_l_door_Moving", Map.ElevatorBottom );
	OnTrigger( "eldoor_l_goto", Map.ElevatorDoor );

	// cs: new triggers for cappoints
	OnTrigger( "Allies captured truckbed_trigger1", Map.GoldCap1_Captured );
	OnTrigger( "Allies captured truckbed_trigger2", Map.GoldCap2_Captured );

	// Move plant goals
	Util.SetGoalOffset( 120, 0, -98, "PLANT_West_Wall" );
	Util.SetGoalOffset( -127, 75, -98, "PLANT_East_Wall" );

	SetMapGoalProperties( "ATTACK_.*", {mincamptime = 15, maxcamptime = 30} );
	SetMapGoalProperties( "DEFEND_.*", {mincamptime = 20, maxcamptime = 40} );

	RTCWUtil.SetPrimaryGoals( 1.0 );
	Util.DisableGoal( ".*", true ); //all but routes

	Map.FriendlyFire = GetCvar( "g_friendlyfire" );

	SetAvailableMapGoals( TEAM.ALLIES, true, {
		"PLANT_East_Wall",
		"PLANT_West_Wall",
		"PANZER_Alliesfirst.*",
		"ATTACK_Alliedfirstdynodefense.*",
		"CHECKPOINT.*",
		"CAPPOINT_Fake_.*",
		"ARTILLERY_S_bFlag.*",
		"CALLARTILLERY_bFlag.*",
	});

	SetAvailableMapGoals( TEAM.AXIS, true, {
		"CALLARTILLERY_Axis_first_2",
		"ARTILLERY_S_Axis_first.*",
		"AIRSTRIKE_rFlag.*",
		"DEFEND_rFlag.*",
	});

	Util.SetMaxUsersInProgress( 6, "CHECKPOINT.*" );
	Util.SetMaxUsersInProgress( 3, "FLAG.*" );

	SetGoalPriority( "CALL.*", 1.0 );
	SetGoalPriority( "ARTILLERY.*", 1.0 );
	SetGoalPriority( "DEFEND_rEng.*", 0.6 );

	Util.LimitToClass( "DEFEND_rEng.*", TEAM.AXIS, CLASS.ENGINEER );

	// makes sure cappoints are disabled at map start
	Util.DisableGoal("CAPPOINT_Goldcap.*");
	Util.DisableGoal("ROUTE_westwall");
	Util.DisableGoal("ROUTE_eastwall");

	MapRoutes =
	{
		CHECKPOINT_delivery_flag =
		{
			ROUTE_allied_spawn =
			{
				ROUTE_westwall = {Weight=2,},
				ROUTE_eastwall = {Weight=2,},
				ROUTE_ladder = {},
				ROUTE_stairs = {},
			},
		},
		ATTACK_Alliedfirstdynodefense_1 =
		{
			ROUTE_allied_spawn =
			{
				ROUTE_west1 = {},
				ROUTE_west2 = {},
				ROUTE_east1 = {},
			},
		},

		CAPPOINT_Goldcap_1 =
		{
			ROUTE_GoldGrab =
			{
				ROUTE_Lower1 =
				{
						ROUTE_Lower4 = { ROUTE_Lower6 = {}, },
						ROUTE_Lower5 = { ROUTE_Lower6 = {}, },
						ROUTE_Lower2 = { Weight = 2,  ROUTE_Lower7 = { }, },
				},
				ROUTE_Top1 =
				{
						ROUTE_Lower4 = { ROUTE_Lower6 = {}, },
						ROUTE_Lower5 = { ROUTE_Lower6 = {}, },
						ROUTE_Lower7 = { Weight = 2, },
				},
			},
		},
		ATTACK_bTransmit1 =
		{
			ROUTE_FlagSpawn =
			{
				ROUTE_FSEast1 =
				{
					ROUTE_Top1 =
					{
						ROUTE_Top2 = { ROUTE_Lower6 = {}, },
						ROUTE_Lower4 = { ROUTE_Lower6 = {}, },
						ROUTE_Lower5 = { ROUTE_Lower6 = {}, },
						ROUTE_Lower7 = { Weight = 2, },
					},
					ROUTE_Lower1 =
					{
						ROUTE_Lower4 = { ROUTE_Lower6 = {}, },
						ROUTE_Lower5 = { ROUTE_Lower6 = {}, },
						ROUTE_Lower2 = { Weight = 2,},
					},
				},
			},
		},
		DEFEND_rFlag1 =
		{
			ROUTE_rspawn =
			{
				ROUTE_FSEast2 = {},
				ROUTE_FSWest2 = {},
			},
		},
	};
	MapRoutes.ATTACK_bTransmit1.ROUTE_FSWest1 = MapRoutes.ATTACK_bTransmit1.ROUTE_FSEast1;
	MapRoutes.ATTACK_bTransmit2 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit3 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit4 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit5 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit6 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit7 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit8 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit9 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_Alliedfirstdynodefense_2 = MapRoutes.ATTACK_Alliedfirstdynodefense_1;
	MapRoutes.ATTACK_Alliedfirstdynodefense_3 = MapRoutes.ATTACK_Alliedfirstdynodefense_1;
	MapRoutes.ATTACK_Alliedfirstdynodefense_4 = MapRoutes.ATTACK_Alliedfirstdynodefense_1;
	MapRoutes.ATTACK_Alliedfirstdynodefense_5 = MapRoutes.ATTACK_Alliedfirstdynodefense_1;
	MapRoutes.ATTACK_Alliedfirstdynodefense_6 = MapRoutes.ATTACK_Alliedfirstdynodefense_1;
	MapRoutes.ATTACK_Alliedfirstdynodefense_7 = MapRoutes.ATTACK_Alliedfirstdynodefense_1;
	MapRoutes.ATTACK_Alliedfirstdynodefense_8 = MapRoutes.ATTACK_Alliedfirstdynodefense_1;
	MapRoutes.PLANT_East_Wall = MapRoutes.ATTACK_Alliedfirstdynodefense_1;
	MapRoutes.PLANT_West_Wall = MapRoutes.ATTACK_Alliedfirstdynodefense_1;
	MapRoutes.ATTACK_Axisgoldcapdef_2 = MapRoutes.ATTACK_Axisgoldcapdef_1;
	MapRoutes.ATTACK_Axisgoldcapdef_3 = MapRoutes.ATTACK_Axisgoldcapdef_1;
	MapRoutes.ATTACK_Axisgoldcapdef_4 = MapRoutes.ATTACK_Axisgoldcapdef_1;
	MapRoutes.ATTACK_Axisgoldcapdef_5 = MapRoutes.ATTACK_Axisgoldcapdef_1;
	MapRoutes.ATTACK_Axisgoldcapdef_6 = MapRoutes.ATTACK_Axisgoldcapdef_1;
	MapRoutes.DEFEND_rFlag2 = MapRoutes.DEFEND_rFlag1;
	MapRoutes.DEFEND_rFlag3 = MapRoutes.DEFEND_rFlag1;
	MapRoutes.DEFEND_rFlag4 = MapRoutes.DEFEND_rFlag1;
	MapRoutes.DEFEND_rFlag5 = MapRoutes.DEFEND_rFlag1;
	MapRoutes.DEFEND_rFlag6 = MapRoutes.DEFEND_rFlag1;
	MapRoutes.DEFEND_rFlag7 = MapRoutes.DEFEND_rFlag1;
	MapRoutes.AIRSTRIKE_rFlag1 = MapRoutes.DEFEND_rFlag1;
	MapRoutes.CALLARTILLERY_axis_first_2 = MapRoutes.DEFEND_rFlag1;

	Util.Routes(MapRoutes);
	Util.UpdateSwitchData();

	yield();yield();
	RTCWUtil.KillEntities( {72, 155, 201, 203} );

	Util.MapDebugPrint( "Omni-bot map script for te_delivery_b1 executed." );
};

global OnBotJoin = function( bot )
{
	RTCWUtil.SelectSoldierWeapons( TEAM.AXIS, bot, WEAPON.PANZERFAUST, WEAPON.VENOM );
	RTCWUtil.SelectSoldierWeapons( TEAM.ALLIES, bot, WEAPON.PANZERFAUST, WEAPON.VENOM );
	RTCWUtil.NoSnipe( bot );

	//default spawn
	bot.ChangeSpawnPoint( 0 );
};
