global Map =
{
	DontDispenseAmmo = true,
	DocStatus = false,
	Suicide = true,

	Blocked_Dam_Door_Destroyed = function( trigger )
	{
		if (!Map.DocStatus)
		{
			Map.RestrictAxis();
		}

		SetAvailableMapGoals( TEAM.AXIS, false, {
			"ARTILLERY_S_rFlag.*",
			"DEFEND_rFlag.*",
			"CHECKPOINT.*",
			"MOUNTMG42_flagmg.*",
			"AIRSTRIKE_rFlag.*",
			"CALLARTILLERY_rFlag.*",
		});

		SetAvailableMapGoals( TEAM.AXIS, true, {
			"ARTILLERY_S_rWalkway.*",
			"DEFEND_rXlab.*",
		});

		if ( Map.Suicide ) {
			RTCWUtil.SetSuicide( TEAM.AXIS, CLASS.LIEUTENANT, 0, 0 );
		}
		RTCWUtil.SetTeamSuicide( TEAM.AXIS, 1, 0 );

		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_bFlag.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, {
			"ATTACK_bXlab.*",
			"ARTILLERY_S_bSpawnkill.*",
			"AIRSTRIKE_bSpawnkill.*",
			"DEFEND_bLT.*",
			"PLANT_X_Lab_equipment",
			"FLAG_Research_Documents",
			"PANZER_bSpawnkill.*",
			"GRENADE_bSpawnkill.*",
		});
		print( "Blocked_Dam_Door_Destroyed" );
	},

	Service_Entrance_Destroyed = function( trigger )
	{
		print( "Service_Entrance_Destroyed" );

		// Axis need to switch to spawn pt 101 if they have the flag
	},

	X_Lab_equipment_Destroyed = function( trigger )
	{
		print( "X_Lab_equipment_Destroyed" );
	},

	Research_Documents_Taken = function( trigger )
	{
		Map.DocStatus = true;

		print( "Research_Documents_Taken" );
	},

	Research_Documents_Transmitted = function( trigger )
	{
		Map.DocStatus = false;
		SetAvailableMapGoals( TEAM.ALLIES, false, "FLAG_Research_Documents" );
		Util.DisableGoal( "CAPPOINT_deliver" );

		print( "Research_Documents_Transmitted" );
	},

	Research_Documents_Secured = function( trigger )
	{
		Map.DocStatus = false;

		print( "Research_Documents_Secured" );
	},

	the_flag_Axis_Captured = function( trigger )
	{
		print( "the_flag_Axis_Captured" );
		// Axis need to switch to spawn pt 101 if service entrance is blown
	},

	the_flag_Allies_Captured = function( trigger )
	{
		SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bFlag.*" );

		print( "the_flag_Allies_Captured" );
	},

	RestrictAxis = function ()
	{
		Wp.SetWaypointFlag( "axisblock1", "allies", true );
		Wp.SetWaypointFlag( "axisblock2", "allies", true );
		//Wp.SetWaypointFlag( "axisblock3", "allies", true );
	},
	UnrestrictAxis = function()
	{
		Wp.SetWaypointFlag( "axisblock1", "allies", false );
		Wp.SetWaypointFlag( "axisblock2", "allies", false );
		//Wp.SetWaypointFlag( "axisblock3", "allies", false );
	},

	LadderTrigger =
	{
		Name = "LadderTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableBotPush( true );
				b.DisableCombatMovement = true;
			}
		},
		OnExit = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableBotPush( false );
				b.DisableCombatMovement = false;
			}
		},
	},
	KillBridge1 = function ()
	{
		RTCWUtil.KillEntities({196,321,178});
	},

	KillAxisSpawn = function ()
	{
		RTCWUtil.KillEntities({413,322});
	},

};

global OnMapLoad = function()
{
	ladder = OnTriggerRegion( AABB( -480.000,1743.000,535.000,-344.000,1933.000,971.000 ), Map.LadderTrigger );
	//EntityKill(196);
		//t131_Opening
		//178_Opening
		//321_Opening
		//322_Opening
		// "Planted at the Blocked Dam Door."

	OnTrigger( "t131_Opening", Map.KillBridge1 );
	OnTrigger( "322_Opening", Map.KillAxisSpawn );

	OnTrigger( "the Blocked Dam Door Destroyed.", Map.Blocked_Dam_Door_Destroyed );
	OnTrigger( "MISSING_STRING", Map.Service_Entrance_Destroyed );
	OnTrigger( "MISSING_STRING", Map.X_Lab_equipment_Destroyed );
	OnTrigger( "Allies have stolen the Research Documents!", Map.Research_Documents_Taken );
	OnTrigger( "Allies transmitted the research documents!", Map.Research_Documents_Transmitted );
	OnTrigger( "Axis captures storage area spawn!!", Map.the_flag_Axis_Captured );
	OnTrigger( "Allies captures storage area spawn!!", Map.the_flag_Allies_Captured );

	SetMapGoalProperties( "ATTACK_.*", {mincamptime = 15, maxcamptime = 30} );
	SetMapGoalProperties( "DEFEND_.*", {mincamptime = 30, maxcamptime = 45} );
	SetMapGoalProperties( "PANZER_.*", {mincamptime = 60, maxcamptime = 90} );
	SetMapGoalProperties( "MOUNT_.*", {mincamptime = 45, maxcamptime = 60} );
	Util.DisableGoal( ".*", true ); //all but routes

	RTCWUtil.SetPrimaryGoals( 1.0 );
	SetGoalPriority( "ARTILLERY.*", 1.0 );
	SetGoalPriority( "AIRSTRIKE.*", 0.95 );
	SetGoalPriority( "CALL.*", 1.0 );
	SetGoalPriority( "PANZER.*", 0.95 );
	SetGoalPriority( "PLANT_Service_Entrance", 1.0 );

	Map.UnrestrictAxis();

	Util.EnableGoal( "CAPPOINT_deliver" );
	SetAvailableMapGoals( TEAM.ALLIES, true, {
		"CHECKPOINT.*",
		"PLANT_Blocked_Dam_Door",
		"PLANT_Service_Entrance",
		"ARTILLERY_S_bFlag.*",
		"ATTACK_bFlag.*",
	});

	SetAvailableMapGoals( TEAM.AXIS, true, {
		"ARTILLERY_S_rFlag.*",
		"CALLARTILLERY_rFlag.*",
		"DEFEND_rFlag.*",
		"CHECKPOINT.*",
		"MOUNTMG42_flagmg.*",
		"AIRSTRIKE_rFlag.*",
	});

	RTCWUtil.LimitToClass("MOUNT.*", TEAM.AXIS, CLASS.LIEUTENANT, CLASS.SOLDIER);
	RTCWUtil.LimitToClass("DEFEND_bLT.*", TEAM.ALLIES, CLASS.LIEUTENANT);
	RTCWUtil.LimitToClass("GRENADE_bSpawnkill.*", TEAM.ALLIES, CLASS.LIEUTENANT);
	RTCWUtil.LimitToClass("FLAG.*", TEAM.ALLIES, CLASS.MEDIC, CLASS.SOLDIER, CLASS.ENGINEER);
	Util.SetMaxUsersInProgress( 2, "PLANT_Service_Entrance" );
	Util.SetMaxUsersInProgress( 1, "PANZER.*" );

	MapRoutes =
	{
		CHECKPOINT_the_flag =
		{
			ROUTE_bSpawn =
			{
				ROUTE_damupper = {},
				ROUTE_damladder = {},
				ROUTE_westdamladder =
				{
					Weight = 3,
					ROUTE_damdoor = {},
					ROUTE_damducts = {Weight = 2,},
				},
			},
			ROUTE_rspawn =
			{
				ROUTE_midladder = {},
				ROUTE_midupper = {},
			},
		},
		PLANT_X_Lab_equipment =
		{
			ROUTE_flagspawn =
			{
				ROUTE_midladder =
				{
					ROUTE_midladder2 =
					{
						ROUTE_southdoor = {},
						ROUTE_northdoor = {},
						ROUTE_tunnel = {Weight = 2,},
					},
				},
				ROUTE_middoor =
				{
					Weight = 4,
					ROUTE_southdoor = {},
					ROUTE_northdoor = {},
					ROUTE_tunnel = {Weight = 3,},
				},
			},
		},
		AIRSTRIKE_bSpawnkill1 =
		{
			ROUTE_flagspawn =
			{
				ROUTE_midladder =
				{
					ROUTE_midladder2 =
					{
						ROUTE_southdoor = {},
						ROUTE_northdoor = {},
					},
				},
				ROUTE_middoor =
				{
					Weight = 4,
					ROUTE_southdoor = {},
					ROUTE_northdoor = {},
				},
			},
		},
		DEFEND_rXlab1 =
		{
			ROUTE_rspawn =
			{
				ROUTE_rspawnexit1 = {},
				ROUTE_rspawnexit2 = {},
			},
		},
	};
	MapRoutes.PLANT_Blocked_Dam_Door = MapRoutes.CHECKPOINT_the_flag;
	MapRoutes.FLAG_Research_Documents = MapRoutes.PLANT_X_Lab_equipment;
	MapRoutes.PANZER_bSpawnkill1 = MapRoutes.AIRSTRIKE_bSpawnkill1;
	MapRoutes.PANZER_bSpawnkill2 = MapRoutes.AIRSTRIKE_bSpawnkill1;
	MapRoutes.DEFEND_rFlag1 = MapRoutes.CHECKPOINT_the_flag;
	MapRoutes.DEFEND_rFlag2 = MapRoutes.CHECKPOINT_the_flag;
	MapRoutes.DEFEND_rFlag3 = MapRoutes.CHECKPOINT_the_flag;
	MapRoutes.DEFEND_rFlag4 = MapRoutes.CHECKPOINT_the_flag;
	MapRoutes.DEFEND_rFlag5 = MapRoutes.CHECKPOINT_the_flag;
	MapRoutes.DEFEND_rFlag6 = MapRoutes.CHECKPOINT_the_flag;
	MapRoutes.DEFEND_rFlag7 = MapRoutes.CHECKPOINT_the_flag;
	MapRoutes.DEFEND_rXlab2 = MapRoutes.DEFEND_rXlab1;
	MapRoutes.DEFEND_rXlab3 = MapRoutes.DEFEND_rXlab1;
	MapRoutes.DEFEND_rXlab4 = MapRoutes.DEFEND_rXlab1;
	MapRoutes.DEFEND_rXlab5 = MapRoutes.DEFEND_rXlab1;
	MapRoutes.DEFEND_rXlab6 = MapRoutes.DEFEND_rXlab1;
	MapRoutes.DEFEND_rXlab7 = MapRoutes.DEFEND_rXlab1;
	MapRoutes.DEFEND_rXlab8 = MapRoutes.DEFEND_rXlab1;
	MapRoutes.AIRSTRIKE_rFlag1 = MapRoutes.CHECKPOINT_the_flag;
	MapRoutes.CALLARTILLERY_rFlag1 = MapRoutes.CHECKPOINT_the_flag;

	Util.Routes( MapRoutes );

	EntityKill(72);
	EntityKill(124);
	EntityKill(139);
	EntityKill(170);
	EntityKill(177);

	EntityKill(244);
	EntityKill(267);
	EntityKill(229);
	//EntityKill(324);
	EntityKill(325);


	yield(); yield();
	if ( Map.Suicide ) {
		RTCWUtil.SetSuicide( TEAM.AXIS, CLASS.LIEUTENANT, 1, 1 );
	}


	print( "OnMapLoad" );
};


global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 80.0;
	RTCWUtil.NoSnipe( bot );
	RTCWUtil.SelectWeapon( bot, WEAPON.PANZERFAUST );
};
