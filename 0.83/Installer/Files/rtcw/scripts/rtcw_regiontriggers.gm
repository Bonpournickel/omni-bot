//==========================================================================================
//
//	This script contains re-usable region trigger tables for RTCW
//
//==========================================================================================

member Create = function(bounds, type, name)
{
	if (RegionTrigger[type]) {
		trigger = tableDuplicate(RegionTrigger[type]);
		if(name) {
			trigger.Name = format("%s: %s",type,name);
		}
		OnTriggerRegion(bounds,trigger);
		return;
	}
	Util.MapDebugPrint("RegionTrigger.Create -> Invalid type specified", true);
};

/*
    Name:		DisableBotPush
    Description:	Disables bot pushing and combat movement in the region. Enables on exit

    Usage:
        test = OnTriggerRegion( AABB(x,x,x,x,x,x), RegionTrigger.DisableBotPush );
*/
member DisableBotPush =
{
	Name = "disablepush",
	TriggerOnClass = CLASS.ANYPLAYER,
	OnEnter = function(ent)
	{
		b = Util.IsBot(ent);
		if (b)
		{
			b.DisableBotPush(true);
			b.DisableCombatMovement = true;
			Util.ScriptDebugPrint( GetEntName(ent), "regiontrigger", "entering disablepush." );
		}
	},
	OnExit = function(ent)
	{
		b = Util.IsBot(ent);
		if (b)
		{
			b.DisableBotPush(false);
			b.DisableCombatMovement = false;
			Util.ScriptDebugPrint( GetEntName(ent), "regiontrigger", "exiting disablepush." );
		}
	},
};

/*
    Name:		DisableCombatMovement
    Description:	Disables bot combat movement in the region. Enables on exit

    Usage:
        test = OnTriggerRegion( AABB(x,x,x,x,x,x), RegionTrigger.DisableCombatMovement );
*/
member DisableCombatMovement =
{
	Name = "disablecm",
	TriggerOnClass = CLASS.ANYPLAYER,
	OnEnter = function(ent)
	{
		b = Util.IsBot(ent);
		if (b)
		{
			b.DisableCombatMovement = true;
			Util.ScriptDebugPrint( GetEntName(ent), "regiontrigger", "entering disablecm." );
		}
	},
	OnExit = function(ent)
	{
		b = Util.IsBot(ent);
		if (b)
		{
			b.DisableCombatMovement = false;
			Util.ScriptDebugPrint( GetEntName(ent), "regiontrigger", "exiting disablecm." );
		}
	},
};

/*
    Name:		Increase breakable distance
    Description:	Increases breakable distance in the region. Reverts to MinBreakableDist on exit

    Properties:
        MaxBreakableDist - default 160
        MinBreakableDist - default 90

    Usage:
        test = OnTriggerRegion( AABB(x,x,x,x,x,x), RegionTrigger.BreakableDistance );

    Optional Settings:
        RegionTrigger.BreakableDistance.MinBreakableDist = x;
        RegionTrigger.BreakableDistance.MaxBreakableDist = x;

    Note: Optional settings should be defined after the region trigger is initialized
*/
member BreakableDistance =
{
	Name = "breakabledist",
	TriggerOnClass = CLASS.ANYPLAYER,
	MaxBreakableDist = 160,
	MinBreakableDist = 90,
	OnEnter = function(ent)
	{
		b = Util.IsBot(ent);
		if (b)
		{
			b.TargetBreakableDist = RegionTrigger.BreakableDistance.MaxBreakableDist;
			Util.ScriptDebugPrint( GetEntName(ent), "regiontrigger", "entering breakabledist." );
		}
	},
	OnExit = function(ent)
	{
		b = Util.IsBot(ent);
		if (b)
		{
			b.TargetBreakableDist = RegionTrigger.BreakableDistance.MinBreakableDist;
			Util.ScriptDebugPrint( GetEntName(ent), "regiontrigger", "exiting breakabledist." );
		}
	},
};

/*
    Name:		Vehicle Trigger
    Description:	Triggers on Heavy Vehicles and Increments Map.VehicleLocation var

    Usage:
        test = OnTriggerRegion( AABB(x,x,x,x,x,x), RegionTrigger.VehicleTrigger );
*/
member VehicleTrigger =
{
	Name = "VehicleTrigger",
	TriggerOnClass = { CLASS.VEHICLE_HVY, CLASS.VEHICLE_NODAMAGE, CLASS.VEHICLE },
	OnEnter = function( ent )
	{
		name = GetEntName( ent );
		Util.ScriptDebugPrint( name, "regiontrigger", "entering VehicleTrigger." );

		// only track valid mover goals
		if ( !GetGoal( "MOVER_" + name ) ) {
			return;
		}

		if ( !Map.VehicleLocation ) {
			Map.VehicleLocation = 1;
		} else {
			Map.VehicleLocation += 1;
		}

		triggerInfo =
		{
			Entity = ent,
			Activator = null,
			TagName = name + " at location",
			Action = "arrived",
		};

		SendTrigger( triggerInfo );
	},
	OnExit = function( ent )
	{
		name = GetEntName( ent );
		Util.ScriptDebugPrint( name, "regiontrigger", "exiting VehicleTrigger." );


		// only track valid mover goals
		if ( !GetGoal( "MOVER_" + name ) ) {
			return;
		}

		triggerInfo =
		{
			Entity = ent,
			Activator = null,
			TagName = name + " left location",
			Action = "left",
		};

		SendTrigger( triggerInfo );
	},
};

/*
    Name:		Kill Trigger
    Description:	Has the bot commit suicide. Useful in areas where there is no way for a bot to get out

    Usage:
        test = OnTriggerRegion( AABB(x,x,x,x,x,x), RegionTrigger.KillTrigger );
*/
member KillTrigger =
{
	Name = "KillTrigger",
	TriggerOnClass = CLASS.ANYPLAYER,
	OnEnter = function( ent )
	{
		b = Util.IsBot(ent);
		if (b)
		{
			Util.ScriptDebugPrint( GetEntName(ent), "regiontrigger", "entering KillTrigger." );
			sleep(1);
			b.ExecCommand( "kill" );
		}
	},
};
